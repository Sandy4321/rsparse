// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// get_ftrl_weights
NumericVector get_ftrl_weights(const List& R_model);
RcppExport SEXP _rsparse_get_ftrl_weights(SEXP R_modelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const List& >::type R_model(R_modelSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ftrl_weights(R_model));
    return rcpp_result_gen;
END_RCPP
}
// ftrl_partial_fit
NumericVector ftrl_partial_fit(const S4& m, const NumericVector& y, const List& R_model, const NumericVector& weights, int do_update, int n_threads);
RcppExport SEXP _rsparse_ftrl_partial_fit(SEXP mSEXP, SEXP ySEXP, SEXP R_modelSEXP, SEXP weightsSEXP, SEXP do_updateSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const List& >::type R_model(R_modelSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type do_update(do_updateSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(ftrl_partial_fit(m, y, R_model, weights, do_update, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// prod_csr_dense
NumericMatrix prod_csr_dense(const S4& csr_r, const SEXP& dense_m_r);
RcppExport SEXP _rsparse_prod_csr_dense(SEXP csr_rSEXP, SEXP dense_m_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type csr_r(csr_rSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type dense_m_r(dense_m_rSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_csr_dense(csr_r, dense_m_r));
    return rcpp_result_gen;
END_RCPP
}
// prod_dense_csr
NumericMatrix prod_dense_csr(const SEXP& dense_m_r, const S4& csr_r);
RcppExport SEXP _rsparse_prod_dense_csr(SEXP dense_m_rSEXP, SEXP csr_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type dense_m_r(dense_m_rSEXP);
    Rcpp::traits::input_parameter< const S4& >::type csr_r(csr_rSEXP);
    rcpp_result_gen = Rcpp::wrap(prod_dense_csr(dense_m_r, csr_r));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprod_dense_csr
NumericMatrix tcrossprod_dense_csr(const SEXP& dense_m_r, const S4& csr_r);
RcppExport SEXP _rsparse_tcrossprod_dense_csr(SEXP dense_m_rSEXP, SEXP csr_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type dense_m_r(dense_m_rSEXP);
    Rcpp::traits::input_parameter< const S4& >::type csr_r(csr_rSEXP);
    rcpp_result_gen = Rcpp::wrap(tcrossprod_dense_csr(dense_m_r, csr_r));
    return rcpp_result_gen;
END_RCPP
}
// crossprod_csr_dense
NumericMatrix crossprod_csr_dense(const S4& csr_r, const SEXP& dense_m_r);
RcppExport SEXP _rsparse_crossprod_csr_dense(SEXP csr_rSEXP, SEXP dense_m_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type csr_r(csr_rSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type dense_m_r(dense_m_rSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprod_csr_dense(csr_r, dense_m_r));
    return rcpp_result_gen;
END_RCPP
}
// als_implicit_double
double als_implicit_double(const arma::sp_mat& Conf, arma::mat& X, arma::mat& Y, double lambda, unsigned n_threads, unsigned solver, unsigned cg_steps);
RcppExport SEXP _rsparse_als_implicit_double(SEXP ConfSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP n_threadsSEXP, SEXP solverSEXP, SEXP cg_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Conf(ConfSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< unsigned >::type cg_steps(cg_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(als_implicit_double(Conf, X, Y, lambda, n_threads, solver, cg_steps));
    return rcpp_result_gen;
END_RCPP
}
// als_implicit_float
double als_implicit_float(const arma::sp_mat& Conf, S4& XR, S4& YR, double lambda, unsigned n_threads, unsigned solver, unsigned cg_steps);
RcppExport SEXP _rsparse_als_implicit_float(SEXP ConfSEXP, SEXP XRSEXP, SEXP YRSEXP, SEXP lambdaSEXP, SEXP n_threadsSEXP, SEXP solverSEXP, SEXP cg_stepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Conf(ConfSEXP);
    Rcpp::traits::input_parameter< S4& >::type XR(XRSEXP);
    Rcpp::traits::input_parameter< S4& >::type YR(YRSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< unsigned >::type solver(solverSEXP);
    Rcpp::traits::input_parameter< unsigned >::type cg_steps(cg_stepsSEXP);
    rcpp_result_gen = Rcpp::wrap(als_implicit_float(Conf, XR, YR, lambda, n_threads, solver, cg_steps));
    return rcpp_result_gen;
END_RCPP
}
// als_loss_explicit
double als_loss_explicit(const arma::sp_mat& mat, arma::mat& X, arma::mat& Y, double lambda, unsigned n_threads);
RcppExport SEXP _rsparse_als_loss_explicit(SEXP matSEXP, SEXP XSEXP, SEXP YSEXP, SEXP lambdaSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(als_loss_explicit(mat, X, Y, lambda, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// top_product
IntegerMatrix top_product(const arma::mat& x, const arma::mat& y, unsigned k, unsigned n_threads, S4& not_recommend_r);
RcppExport SEXP _rsparse_top_product(SEXP xSEXP, SEXP ySEXP, SEXP kSEXP, SEXP n_threadsSEXP, SEXP not_recommend_rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< unsigned >::type k(kSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_threads(n_threadsSEXP);
    Rcpp::traits::input_parameter< S4& >::type not_recommend_r(not_recommend_rSEXP);
    rcpp_result_gen = Rcpp::wrap(top_product(x, y, k, n_threads, not_recommend_r));
    return rcpp_result_gen;
END_RCPP
}
// cpp_make_sparse_approximation
NumericVector cpp_make_sparse_approximation(const S4& mat_template, arma::mat& X, arma::mat& Y, int sparse_matrix_type, unsigned n_threads);
RcppExport SEXP _rsparse_cpp_make_sparse_approximation(SEXP mat_templateSEXP, SEXP XSEXP, SEXP YSEXP, SEXP sparse_matrix_typeSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const S4& >::type mat_template(mat_templateSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type sparse_matrix_type(sparse_matrix_typeSEXP);
    Rcpp::traits::input_parameter< unsigned >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_make_sparse_approximation(mat_template, X, Y, sparse_matrix_type, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// arma_svd_econ
List arma_svd_econ(const arma::mat& X);
RcppExport SEXP _rsparse_arma_svd_econ(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_svd_econ(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rsparse_get_ftrl_weights", (DL_FUNC) &_rsparse_get_ftrl_weights, 1},
    {"_rsparse_ftrl_partial_fit", (DL_FUNC) &_rsparse_ftrl_partial_fit, 6},
    {"_rsparse_prod_csr_dense", (DL_FUNC) &_rsparse_prod_csr_dense, 2},
    {"_rsparse_prod_dense_csr", (DL_FUNC) &_rsparse_prod_dense_csr, 2},
    {"_rsparse_tcrossprod_dense_csr", (DL_FUNC) &_rsparse_tcrossprod_dense_csr, 2},
    {"_rsparse_crossprod_csr_dense", (DL_FUNC) &_rsparse_crossprod_csr_dense, 2},
    {"_rsparse_als_implicit_double", (DL_FUNC) &_rsparse_als_implicit_double, 7},
    {"_rsparse_als_implicit_float", (DL_FUNC) &_rsparse_als_implicit_float, 7},
    {"_rsparse_als_loss_explicit", (DL_FUNC) &_rsparse_als_loss_explicit, 5},
    {"_rsparse_top_product", (DL_FUNC) &_rsparse_top_product, 5},
    {"_rsparse_cpp_make_sparse_approximation", (DL_FUNC) &_rsparse_cpp_make_sparse_approximation, 5},
    {"_rsparse_arma_svd_econ", (DL_FUNC) &_rsparse_arma_svd_econ, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rsparse(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
